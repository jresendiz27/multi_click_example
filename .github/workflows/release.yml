name: Release

permissions:
  actions: write
  checks: none
  contents: write
  deployments: write
  issues: read
  discussions: read
  packages: write
  pages: write
  pull-requests: read
  repository-projects: write
  security-events: write
  statuses: write

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  create_release:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: poetry run pyinstaller --specpath ./ ./multi_click_example/main.py  --clean -n multi_click_example_macos_${{ github.ref_name }} -F && cd dist/ && zip -r9 multi_click_example_macos_${{ github.ref_name }}.zip . -i multi_click_example_macos_${{ github.ref_name }}
            OUT_FILE_NAME: multi_click_example_macos_${{ github.ref_name }}.zip
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: poetry run pyinstaller --specpath ./ ./multi_click_example/main.py  --clean -n multi_click_example_windows_${{ github.ref_name }} -F
            OUT_FILE_NAME: multi_click_example_windows_${{ github.ref_name }}.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-latest
            TARGET: ubuntu
            CMD_BUILD: poetry run pyinstaller --specpath ./ ./multi_click_example/main.py  --clean -n multi_click_example_linux_${{ github.ref_name }} -F
            OUT_FILE_NAME: multi_click_example_linux_${{ github.ref_name }}
            ASSET_MIME: application/octet-stream
    steps:
    - uses: actions/checkout@v3
    - name: Install poetry
      run: python3 -m pip install poetry
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'poetry'
    - run: poetry install
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME }}
